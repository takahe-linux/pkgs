# Maintainer: Alastair Hughes < hobbitalastair at yandex dot com>

# Package information
pkgname="linux-generic"
_major_version='4.8'
_srcname="linux-${_major_version}"
pkgdesc="generic kernel"
pkgver="${_major_version}.10"
pkgrel=1

# Additional information...
arch=('i586' 'mips')
url='http://www.kernel.org'
license=('GPL2')

# Dependency information
hostdepends=('bc' 'inetutils' "${_target_triplet}-gcc-static"
    "${_target_triplet}-binutils")
provides=('linux')
conflicts=('linux')

# Building information
options=('!buildflags')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/${_srcname}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v4.x/patch-${pkgver}.xz")
md5sums=('c1af0afbd3df35c1ccdc7a5118cd2d07'
         '37eadcdaefae51ced736747cb817aa58')

modules() {
    # true if modules are enabled, false otherwise
    grep ".config" -e 'CONFIG_MODULES=y' > /dev/null
    return "$?"
}

prepare() {
    cd "${srcdir}/${_srcname}"

    # Add upstream patch.
    patch -p1 -i "${srcdir}/patch-${pkgver}"

    # Set extraversion to pkgrel.
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # Clean up the kernel tree.
    make mrproper

    # Make the default config.
    make defconfig ARCH="${_target_arch_alias}" \
        CROSS_COMPILE="${_target_triplet}-"

    cat >> .config << EOF
CONFIG_DEFAULT_HOSTNAME="takahe"
EOF

    case "${_target_arch}" in
        mips)
            # Use the malta config.
            cp -f "arch/mips/configs/malta_defconfig" ".config"
            # We want a big-endian kernel.
            sed -i -e 's:CONFIG_CPU_LITTLE_ENDIAN:CONFIG_CPU_BIG_ENDIAN:' \
                .config

            # Currently the kernel will not build with -Werror; I haven't
            # figured out a way to neatly disable this, so sed it out of
            # the Kbuild file for mips.
            sed -i arch/mips/Kbuild -e '/subdir-ccflags-y/d'

           yes '' | make oldconfig ARCH="${_target_arch_alias}" \
               CROSS_COMPILE="${_target_triplet}-"
            ;;
        i586)
            # Ensure that we actually use i586.
            # We also add in a bunch of extra legacy drivers in the hope that
            # at least one of them works.
            cat >> .config << EOF
CONFIG_M586=y
CONFIG_ATA_SFF=y
CONFIG_PATA_PLATFORM=y
CONFIG_PATA_LEGACY=y
CONFIG_PATA_ACPI=y
EOF
            ;;
        *) echo "Using default...";;
    esac
}


build() {
    cd "${srcdir}/${_srcname}"

    # Make the kernel image and modules, if needed
    case "${_target_arch_alias}" in
        i386) targets="bzImage";;
        mips) targets="vmlinux";;
        *) targets="vmlinuz";;
    esac
    if modules; then
        # Modules are enabled
        targets+=" modules"
    fi

    yes '' | make ${targets} ARCH="${_target_arch_alias}" \
        CROSS_COMPILE="${_target_triplet}-"
}


package() {
    # Main Linux kernel package
    cd "${srcdir}/${_srcname}"

    # Find the kernel version
    _kernver="$(make kernelrelease)"

    # Make the boot directory
    mkdir -p "${pkgdir}/boot"

    # Copy the image to the end location
    if [ -e "arch/${_target_arch_alias}/boot/bzImage" ]; then
        cp "arch/${_target_arch_alias}/boot/bzImage" \
           "${pkgdir}/boot/vmlinuz"
    elif [ -e "vmlinuz" ]; then
        cp "vmlinuz" "${pkgdir}/boot/vmlinuz"
    else
        cp "vmlinux" "${pkgdir}/boot/vmlinuz"
    fi

    # Install the modules and firmware, if required
    if modules; then
        mkdir -p "${pkgdir}"/{/usr/lib/modules,/usr/lib/firmware}
        make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install
        # Remove the kernel source tree
        rm -f "${pkgdir}/usr/lib/modules/${_kernver}"/{source,build}
        # Add vmlinux
        install -D -m644 'vmlinux' \
            "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux" 
    fi
}

# Maintainer: Alastair Hughes < hobbitalastair at yandex dot com>

# Based of the Arch Linux linux package

# Edit this line to change the target config (TODO: Make automatic)
_target_config='qemu-malta'

# Package information
pkgname="linux-${_target_config}"
_major_version='4.0'
_srcname="linux-${_major_version}"
pkgdesc="Linux kernel and modules for '${_target_config}'"
pkgver="${_major_version}.1"
pkgrel=1

# Additional information...
arch=('i586' 'mips')
url='http://www.kernel.org'
license=('GPL2')

# Dependency information
groups=('base')
#TODO: Expand!
makedepends=('bc' 'gcc')
provides=('kernel')
conflicts=('kernel')

# Building information
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        "config.${_target_config}"
        *.patch
       )
md5sums=('d3fc8316d4d4d04b65cbc2d70799e763'
         '2f2822cf2d84a8ec3a8b044e732cf45b'
         'SKIP'
         'ee9e4d173c2fff74659c862479570d36')

prepare() {
    cd "${srcdir}/${_srcname}"

    # Add upstream patch
    patch -p1 -i "${srcdir}/patch-${pkgver}"

    # Add all of the patches
    for _patch in ${srcdir}/*.patch; do
        patch -p1 -i "${_patch}"
    done

    # Set extraversion to pkgrel
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # Clean up the kernel tree
    make mrproper

    # Update the config to use the proper toolchain!
    sed -i -e "/CONFIG_CROSS_COMPILE/s:=\".*\":=\"${CROSS_COMPILE}\":" \
        "${srcdir}/config.${_target_config}"

    # Move the configuration file to it's location
    cat "${srcdir}/config.${_target_config}" > ./.config

    # Make the default config
    #make defconfig ARCH="${_target_arch_alias}" CROSS_COMPILE="${CROSS_COMPILE}"
    # Make allnoconfig
    #make allnoconfig ARCH="${_target_arch_alias}"
    # Make menuconfig
    #make menuconfig ARCH="${_target_arch_alias}" && \
    #    exit 1
    make menuconfig ARCH="${_target_arch_alias}"

    # Update the config
    yes "" | make oldconfig ARCH="${_target_arch_alias}"  
}


build() {
    cd "${srcdir}/${_srcname}"

    # Make the kernel image and modules, if needed
    if [ $(cat "${srcdir}/config.${_target_config}" | grep 'CONFIG_MODULES=y') ]
        then
        # Modules are enabled
        #make ${MAKEFLAGS} bzImage modules ARCH="${_target_arch_alias}"
        LDFLAGS="-rpath ${_sysroot}${_libdir}" \
        make V=1 ${MAKEFLAGS} ARCH="${_target_arch_alias}" CROSS_COMPILE="${CROSS_COMPILE}"
    else
        # Modules are not enabled
        #make ${MAKEFLAGS} bzImage ARCH="${_target_arch_alias}"
        LDFLAGS="-rpath ${_sysroot}${_libdir}" \
        make V=1 ${MAKEFLAGS} ARCH="${_target_arch_alias}" CROSS_COMPILE="${CROSS_COMPILE}"
    fi
}


package() {
    # Main Linux kernel package

    cd "${srcdir}/${_srcname}"

    # Check for module support
    [ $(cat "${srcdir}/config.${_target_config}" | grep 'CONFIG_MODULES=y') ] && \
        MODULES=true || MODULES=false

    # Find the kernel version
    _kernver="$(make kernelrelease)"

    # Make the installation directories
    mkdir -p "${pkgdir}"/{/usr/lib/modules,/usr/lib/firmware,boot}

    # Copy the image to the end location
    cp "arch/${_target_arch_alias}/boot/bzImage" \
       "${pkgdir}/boot/vmlinuz-${_target_config}"

    # Install the modules and firmware, if required
    if ${MODULES}; then
        make INSTALL_MOD_PATH="${pkgdir}/" modules_install
        # Clean up kernel source tree
        rm -f "${pkgdir}/lib/modules/${_kernver}"/{source,build}
        # Add vmlinux
        install -D -m644 'vmlinux' \
            "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux" 
    fi

}


# Maintainer: Alastair Hughes < hobbitalastair at yandex dot com>

# Package information
pkgname="linux-qemu"
_major_version='4.6'
_srcname="linux-${_major_version}"
pkgdesc="qemu kernel"
pkgver="${_major_version}.2"
pkgrel=1

# Additional information...
arch=('i586' 'mips')
url='http://www.kernel.org'
license=('GPL2')

# Dependency information
groups=('base')
hostdepends=('bc' 'inetutils' "${_target_triplet}-gcc-static"
    "${_target_triplet}-binutils")

# Building information
options=('!buildflags')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/${_srcname}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v4.x/patch-${pkgver}.xz")
md5sums=('d2927020e24a76da4ab482a8bc3e9ef3'
         'c064bbe8108b8e5304f3db2130a96845')

modules() {
    # true if modules are enabled, false otherwise
    grep ".config" -e 'CONFIG_MODULES=y' > /dev/null
    return "$?"
}

prepare() {
    cd "${srcdir}/${_srcname}"

    # Add upstream patch.
    patch -p1 -i "${srcdir}/patch-${pkgver}"

    # Set extraversion to pkgrel.
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # Clean up the kernel tree.
    make mrproper

    # Pick a config that will work with qemu.
    case "${_target_arch}" in
        mips) cp "arch/mips/configs/malta_defconfig" .config
            # We build a big endian kernel; userspace is big endian.
            sed -i .config \
                -e 's:CONFIG_CPU_LITTLE_ENDIAN=y:CONFIG_CPU_BIG_ENDIAN=y:'
            # We assume that devtmpfs is mounted.
            cat >> .config << EOF
CONFIG_DEVTMPFS=y
CONFIG_DEVTMPFS_MOUNT=y
EOF
            # Currently the kernel will not build with -Werror; I haven't
            # figured out a way to neatly disable this, so sed it out of
            # the Kbuild file for mips.
            sed -i arch/mips/Kbuild -e '/subdir-ccflags-y/d'
            ;;
        i586) make defconfig ARCH="${_target_arch_alias}"
            # Ensure that the built kernel supports i586.
            cat >> .config << EOF
CONFIG_M586
EOF
            ;;
        *) make defconfig ARCH="${_target_arch_alias}";;
    esac

    # Enable 9P virtio.
    cat >> .config << EOF
CONFIG_NET_9P=y
CONFIG_NET_9P_VIRTIO=y
CONFIG_9P_FS=y
CONFIG_9P_FS_POSIX_ACL=y
EOF

    # Run oldconfig.
    yes "" | make oldconfig ARCH="${_target_arch_alias}" > /dev/null

    # Update the config to use the proper toolchain.
    sed -i .config -e '\CONFIG_CROSS_COMPILE\d'
    printf 'CONFIG_CROSS_COMPILE="%s-"\n' "${_target_triplet}" >> .config
}


build() {
    cd "${srcdir}/${_srcname}"

    # Make the kernel image and modules, if needed
    case "${_target_arch_alias}" in
        i386) targets="bzImage";;
        *) targets="vmlinuz";;
    esac
    if modules; then
        # Modules are enabled
        targets+=" modules"
    fi

    make ${targets} ARCH="${_target_arch_alias}"
}


package() {
    # Main Linux kernel package
    cd "${srcdir}/${_srcname}"

    # Find the kernel version
    _kernver="$(make kernelrelease ARCH="${_target_arch_alias}")"

    # Make the boot directory
    mkdir -p "${pkgdir}/boot"

    # Copy the image to the end location
    if [ -e "arch/${_target_arch_alias}/boot/bzImage" ]; then
        cp "arch/${_target_arch_alias}/boot/bzImage" \
           "${pkgdir}/boot/vmlinuz"
    else
        cp "vmlinuz" "${pkgdir}/boot/vmlinuz"
    fi

    # Install the modules and firmware, if required
    if modules; then
        make INSTALL_MOD_PATH="${pkgdir}/usr" modules_install \
            ARCH="${_target_arch_alias}"
        # Remove the kernel source tree
        rm -f "${pkgdir}/usr/lib/modules/${_kernver}"/{source,build}
        # Add vmlinux
        install -D -m644 'vmlinux' \
            "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux" 
    fi
}

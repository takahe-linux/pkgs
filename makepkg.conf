################################################################################
# Makepkg config file
# Contains target-specific settings
# All settings need a _ before them to avoid conflicting with makepkg vars
#
# There is three stages for a system:
# - Initial cross compile
# - Temporary system
# - Full system
#
# I intend the PKGBUILDs to be reusable across all of the stages
# Hence this file!
#
################################################################################



# Location preferences
_prefix="/usr"
_libdir="${_prefix}/lib"
_tmpdir="/tmp"
_homedir="/home"
_configdir="/etc"
_bindir="${_prefix}/bin"
_includedir="${_prefix}/include"
_docdir="${_prefix}/share/doc"
_infodir="${_prefix}/share/info"
_mandir="${_prefix}/share/man"
_datadir="/var/lib"
_cachedir="/var/cache"


# Root for packaging, sysroot, general distro building...
_pkgroot="${_homedir}/ash/distro/takahe-linux"
_sysroot="${_pkgroot}/sysroot"
# Location of the computer info files
_computer_info="${_pkgroot}/computers"


# Compiler preferences
_cc="gcc"

# Generic flags
_generic_cflags=""
_generic_ldflags="-Wl,-O1,--sort-common,--as-needed,-z,relro"



################################################################################
# Computer info
################################################################################

# Current computer
_computer_name='hp_dx2810'
_computer='_local'
if [ -r "${_computer_info}/${_computer_name}.sh" ]; then
    . "${_computer_info}/${_computer_name}.sh"
else
    echo "Computer info file for ${_computer_name} not found!"
    exit 1;
fi

# Target computer
_computer_name='toshiba_310cds'
_computer='_target'
if [ -r "${_computer_info}/${_computer_name}.sh" ]; then
    . "${_computer_info}/${_computer_name}.sh"
else
    echo "Computer info file for ${_computer_name} not found!"
    exit 1;
fi


# Target triplet
# DO NOT CHANGE unless aware of the implications...
_target_system="linux-musl"
_target_triplet="${_target_arch}-${_target_system}"
# Specify the toolchain which will be used if cross compiling
_toolchain="i486-${_target_system}"

# TODO: Make automatic
_local_triplet='x86_64-unknown-linux-gnu'

unset _computer


################################################################################
# Check for cross compiling
# If so, enable some more vars
################################################################################

# Set the default name
# Name is used for determining which config should be used
_name="${_target_name}"

# Check for the current stage

if [ "${_target_arch}" != "${_local_arch}" ] || \
   [ "$(uname -m)" != "${_local_arch}" ]; then
    # Cross compiling
    msg2 "Cross compiling for stage 1!"
    CROSS_COMPILE="${_toolchain}-"

    CC="${_toolchain}-${_cc}"
    HOSTCC="${_cc}"

    # CC flags
    if [ "${_target_arch}" != "${_local_arch}" ]; then
        # Cross-compiling to run on the target
        CFLAGS="-march=${_target_cpu}\
                ${_target_flags}"
    else
        # Cross-compiling to run on the local machine
        # For instance, from i386-based to x86_64
        CFLAGS="-march=native \
                ${_local_flags}"
        # Not compiling for the target just yet...
        _name="${_local_name}"
    fi

    CFLAGS="${CFLAGS} \
            ${_generic_cflags} \
            -isysroot ${_sysroot} \
            -isystem=${_includedir} \
            -I=${_includedir}"

    CXXFLAGS="${CFLAGS}"
    HOSTCFLAGS="-D_GNU_SOURCE"
    LDFLAGS="${_generic_ldflags} -L${_sysroot}${_libdir}"
    
else
    msg2 "Native build detected"

    # CC
    CC="${_cc}"

    # CC flags for a nearly-native build
    if [ "${_local_name}" != "${_target_name}" ]; then
        # Not quite native yet...
        CFLAGS="-march=${_target_cpu} ${_generic_cflags} ${_local_flags}"
    else
        # Fully native compilation :)
        CFLAGS="-march=native ${_generic_cflags} ${_local_flags}"
    fi
    CXXFLAGS="${CFLAGS}"

fi

# Other flags...
CARCH="${_target_arch}"
CHOST="${_target_arch}-${_target_system}"

# Change this for DISTCC systems
MAKEFLAGS="-j${_local_cores}"

# Misc flags
CPPFLAGS="-D_FORTIFY_SOURCE=2"
DEBUG_CFLAGS="-g -fvar-tracking-assignments"
DEBUG_CXXFLAGS="-g -fvar-tracking-assignments"


################################################################################
# Makepkg specific stuff
# See the default conf supplied with makepkg for more information
################################################################################

DLAGENTS=('ftp::/usr/bin/curl -fC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')
BUILDENV=(fakeroot !distcc color !ccache check !sign)

BUILDDIR="/tmp/makepkg"

OPTIONS=(strip docs !libtool staticlibs emptydirs zipman purge !upx !debug)

#-- File integrity checks to use. Valid: md5, sha1, sha256, sha384, sha512
INTEGRITY_CHECK=(md5)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod usr/local)

PKGDEST="${_pkgroot}/pkgs"
SRCDEST="${_pkgroot}/sources"
#LOGDEST="${_pkgroot}/logs"
PACKAGER="Alastair Hughes <hobbitalastair at yandex dot com>"
#GPGKEY=""

COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)

# WARNING: Do NOT modify these variables unless you know what you are
#          doing.
PKGEXT='.pkg.tar.xz'
SRCEXT='.src.tar.gz'


